worker_processes auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent"';

    access_log  /var/log/nginx/access.log main;

    sendfile        on;
    keepalive_timeout 65;
    server_tokens off;

    # Gzip Compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_min_length 256;

    # Rate Limiting Zone
    limit_req_zone $binary_remote_addr zone=one:10m rate=10r/s;

    server {
        listen       80;
        server_name  localhost;

        root   /usr/share/nginx/html;
        index  index.html;

        # Security Headers
        add_header Content-Security-Policy "
                default-src 'self';
                script-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;
                style-src 'self' 'unsafe-inline' https://fonts.googleapis.com;
                font-src 'self' https://fonts.gstatic.com;
                connect-src 'self' http://localhost:8001 http://localhost:8000 http://localhost;
                img-src 'self' data: https://lh3.googleusercontent.com https://s2.coinmarketcap.com;
                frame-ancestors 'none';
                object-src 'none';
            " always;


        # Optimize static file handling with caching
        location ~* \.(css|js|jpg|png|gif|ico|svg)$ {
            expires 30d;
            add_header Cache-Control "public, max-age=2592000";
            log_not_found off;
        }

        # Serve landing_page.html for root only
        location = / {
            try_files $uri /landing/landing_page.html;
        }

        # Secure Credentials Setting Page with Access Key and Rate Limiting
        location = /settings/set_credentials {
            limit_req zone=one burst=5 nodelay;

            if ($arg_access_key = "") {
                error_page 403 /error_pages/403.html;
                return 403;
            }

            # Serve the credentials page if 'access_key' exists
            try_files /auth/user_set_credentials.html =404;
        }

        # Handle all other /settings/* routes
        location ~ ^/settings/.*$ {
            try_files $uri /dashboard/user_settings_profile.html;
        }

        # Handle specific routes
        location /dashboard {
            try_files $uri /dashboard/assets.html =404;
        }

        location /login {
            try_files $uri /auth/login.html =404;
        }

        location /register {
            rewrite ^/register$ /login?action=register break;
        }

        location /contact {
            try_files $uri /privacy/contact-support.html =404;
        }

        # Serve 403.html for 403 errors
        error_page 403 /403.html;
        location = /error_pages/403.html {
            root /usr/share/nginx/html;
        }

        # Remove 'internal' to allow access
        location = /auth/user_set_credentials.html {
            root /usr/share/nginx/html;
        }

        # Redirect /crypto-detail and /crypto-detail/ to /crypto-detail/BTCUSDT
        location ~ ^/crypto-detail/?$ {
            return 302 /dashboard/crypto-detail/BTCUSDT;
        }

        location /crypto-detail/ {
            try_files $uri $uri/ /dashboard/crypto-detail.html =404;
        }

        location /terms {
            try_files $uri /privacy-/terms.html =404;
        }

        location /privacy {
            try_files $uri /privacy.html =404;
        }

        # Serve 404.html for 404 errors
        error_page 404 /404.html;
        location = /error_pages/404.html {
            root /usr/share/nginx/html;
        }

        # Serve 500-level error pages
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }

        # Proxy API requests to localhost:8001 and handle CORS
        location /proxy/ {
            proxy_pass http://localhost:8001/;
            proxy_set_header Host $host;

            # Add CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;

            # Handle preflight OPTIONS requests
            if ($request_method = OPTIONS) {
                return 204;
            }
        }
    }
}
